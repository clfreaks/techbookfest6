
= エディタ「Lem」


LemはCommon Lispでほぼ全てが実装されたエディタです。



Common Lispでの拡張と、その開発環境を提供しています。 本書の執筆陣の過半がCommon Lispの開発にはLemを利用しているという実績から、ことCommon Lispの開発には必要十分な環境を提供できていると言えます。また、数はまだ少ないですが、Common Lisp以外の言語編集をサポートしています。
操作体系は作者がemacsを使っていたこともあり、emacsに似せてはいますが、切り替えて使えるvi(vim)のモードが用意されています。
本章では、3章以降で必要とされるLemのlispの開発/編集に関連した機能にしぼった紹介を行います。既にemacs等で環境を構築されている方は読みとばして問題ないと思います。Lemの踏み込んだ解説については7章を参照ください。

== Lemのインストール


LemをインストールするにはRoswellを使うのが簡単です。
次のコマンドでインストールできます。


//emlist{
$ ros install cxxxr/lem
//}


Lemは256色をサポートしたターミナルで使うことを想定しています。
linuxのターミナルの場合、デフォルトでは8色しか表示できない事が多いのでTERM変数を変更してください。


//emlist{
$ export TERM=xterm-256color
//}

== キーバインドの表記について


LemではEmacsと同じようにControlやMetaをプリフィクスとするコマンドを使います。



@<b>{C-} コントロールキーを押しっぱなしにして別のキーを打つことを意味します。



@<b>{M-} メタキーを押しっぱなしにして別のキーを打つことを意味します。メタキーはAltキーを使い、Macのターミナルでは設定でOptionキーに割り当てられます。



たとえば
@<tt>{C-x o}はControlを押しながらxを押したあと、Controlを離してoを押します。
@<tt>{C-x C-o}だとControlを押しながらxを押し、更にControlを押しながらoを押します。

== Lemの起動と終了


コマンドラインからLemを起動するにはlemコマンドを使います。
lemコマンドはRoswellからインストールしている場合に使えます。


//emlist{
$ lem [ファイル名]
//}


終了するには@<tt>{C-x C-c}と入力してください。


== 基本的な使い方

ここでlispの開発の為に必要なLemの最小限の利用方法を説明します。

=== ファイルの編集

lemを起動したら新しいファイルを開いて編集しましょう。@<tt>{C-x C-f}と入力すると、画面下部にパスを入力する画面が表示されます。tabを押すと補完が効くので既存のディレクトリに移動するのも簡単です。入力が終わった所でreturnを押すとそのファイルを開きます。
編集が終わったら@<tt>{C-x C-s}で保存できます。

* bufferの切り替え、削除
* windowの分割と削除

=== slime

Lemでのlispの開発支援をslimeと呼びます。slimeを起動するにはlem上で、@<tt>{M-x slime}と入力します。ウィンドウが分割され、@<tt>{CL-USER>}と表示された画面が表示されます。この画面をlispの世界ではreplと呼び、lispの式を打ち込むとその結果を返してくる機能を持っています。
コマンドプロンプトのようなものと思っていれば良いでしょう。@<tt>{10}のような数値を入力してreturnすると結果として@<tt>{10}が返ります。@<tt>{(+ 2 (* 3 4) 5)}のような少し複雑な式を入力すると@<tt>{19}のようにきちっと計算しているのがわかります。

コマンドプロンプトと同様replでも同じ式を何度も打ち込んだり、過去に打った式を編集してもう一度打ち込みたい時の為に履歴を参照することができます。普通のコマンドプロンプトでは履歴の参照は@<tt>{↑},@<tt>{↓}キーで行ないますが、lemのreplではカーソルが動いてしまいます。履歴の参照は@<tt>{↑}にあたるのが@<tt>{M-p},@<tt>{↓}にあたるのが、@<tt>{M-n}です。

* listener-clear-buffer
* lisp-repl-interrupt

=== lispファイルを編集中にできること。
find-fileで拡張子lispのファイルを開くとlisp用のキー割り当てが幾つか使えるようになります。
* C-c C-e
* C-M-q

* カーソルの移動(ここは努力目標)
