* Webスクレイピングと文書分類
** この章でやること、意義

インターネット上を流れるトラフィックは量的な意味では動画データが過半数を占めるようになりつつあるが、質的な意味では、依然としてテキストデータによる情報のやりとりが中心となっている。テキストデータは日々ものすごいスピードで増え続けており、一人の人間の目で追い続けるのはもはや不可能である。また、それらのテキストデータは大抵の場合構造化されておらず、そのままでは使えないことが多い。アクセス可能な情報は大量にあり、それらは金鉱のように価値あるものを含んでいるが、目的のものを抽出するための方法論が必要とされている。このことを金鉱採掘になぞらえて、テキストマイニングと呼ぶ。
本章では、Common Lispの既存のライブラリを用いて、インターネットをクローリングし、必要な情報を収集した上で構造化するための方法を紹介する。

** Webスクレイピング
Webスクレイピングとはウェブサイトから必要な情報を取り出す行為のことである。scrapingとは「削り取る」というくらいの意味であり、ウェブサイトというかつお節から削り節を削り出し、味噌汁という利用可能な形に加工した上で美味しくいただくというのが我々の目指すところである。

*** Webスクレイピングに必要なライブラリ
Webスクレイピングでは、(1)HTMLデータを取得し、(2)これを解析し木構造に変換し、その後に(3)必要な情報を探索していくというプロセスを踏む。
Common Lispにはこの各段階について対応したライブラリがあるので、以下ではそのインストール方法と基本的な使用例を解説する。なおQuicklisp環境は既に用意されているという前提で話を進める。

*** HTTPクライアント: Dexador
ウェブサイトからデータを取得するためにはHTTPクライアントのDexadorを使用する。Common Lispには古くからDrakmaというHTTPクライアントがあるが、Dexadorの方が(特に同じホストに複数回アクセスする場合において)速く動作する。
**** インストール
#+BEGIN_SRC lisp
(ql:quickload :dexador)
#+END_SRC

**** 使い方
最も基本的かつ重要なのはGETメソッドで指定のURLからデータを取得するdex:getである。これは(1)本体データの文字列、(2)ステータスコード、(3)レスポンスヘッダーのハッシュテーブル、(4)URI構造体、(5)読み出し元ソケットのストリームの5つを多値で返す。
#+BEGIN_SRC lisp
(dex:get "http://lisp.org/")

"<HTML>
<HEAD>
  <title>John McCarthy, 1927-2011</title>
  <STYLE type=\"text/css\">
    BODY {text-align: center}
  </STYLE>
</HEAD>
<BODY>
<h1>John McCarthy</h1>
<img src=\"jmccolor.jpg\" alt=\"a picture of John McCarthy, from his website\"/>
<h3>1927-2011</h3>
<br><br>
<a href=\"http://www-formal.stanford.edu/jmc/\">John McCarthy's Home Page</a><br>
<a href=\"http://news.stanford.edu/news/2011/october/john-mccarthy-obit-102511.html\">Obituary</a>
</BODY>
</HTML>
"
200
#<HASH-TABLE :TEST EQUAL :COUNT 10 {1003B35F73}>
#<QURI.URI.HTTP:URI-HTTPS https://lisp.org/>
#<CL+SSL::SSL-STREAM for #<FD-STREAM for "socket 192.168.11.253:47632, peer: 144.76.156.38:443" {100361BC23}>>
#+END_SRC

このうち特に重要なのは最初の2つで、データ本体は次節で扱うHTMLパーサへの入力として用い、ステータスコードはデータの取得に成功したか失敗したか、さらにその理由を調べるのに用いる。

*** XML/HTMLパーサ: Plump
ここで紹介するPlumpと次節で紹介するCLSSは同じ作者のプロダクトで、同時に使われる。
PlumpはXML/HTMLデータを文字列として受け取り、CLOSオブジェクトのノードから構成される木構造を生成、そしてその木構造のルートノードのオブジェクトを返す。

#+BEGIN_SRC lisp
(plump:parse (dex:get "http://lisp.org/"))

;; => #<PLUMP-DOM:ROOT {1008638843}>
#+END_SRC

#+BEGIN_SRC lisp
(defparameter root (plump:parse (dex:get "http://lisp.org/")))
(plump:children root)
;; => #(#<PLUMP-DOM:ELEMENT HTML {1008AE94D3}> #<PLUMP-DOM:TEXT-NODE {1008AF2EF3}>)
#+END_SRC


*** CSSセレクタ: CLSS

*** スクレイピングの実際
**** ログインを必要とするサイト
**** サイトを取得する
**** HTMLをパースする
**** 必要な情報を見つける
**** 番外編: Twitterのクローリング

** 文書分類/文書クラスタリング

*** 文書分類に必要なライブラリ
**** 形態素解析 mecab
**** 教師あり学習、線形分類器: cl-online-learning
**** 教師なし学習、NMF、テンソル分解: clml

*** データセットの作成
**** TF-IDF
**** word2vec

*** スパースなデータの取り扱い
